AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Lambda application that calls the Lambda API.

Parameters:
  ygoTcgTableName:
    Description: Dynamo YGO TCG table name
    Type: String
    Default: ygoTcg
  variablesTableName:
    Description: Dynamo YGO TCG table name
    Type: String
    Default: variables
  region:
    Description: AWS region
    Type: String
    Default: us-east-2
  userId:
    Description: User ID for SQS and SQS client with permissions
    Type: String
  botName:
    Description: Telegram bot name
    Type: String
  botToken:
    Description: Telegram bot token
    Type: String
Resources:
  ygoTcgDynamoDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ygoTcgTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  variablesDynamoDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref variablesTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  telegramWebhookLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: lambda-lib
      Description: Dependencies for the Telegram Webhook function.
      ContentUri: ./layer/lib/.
      CompatibleRuntimes:
        - nodejs18.x
  telegramWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          BOT_NAME: !Ref botName
          BOT_TOKEN: !Ref botToken
          TABLE_NAME: !Ref ygoTcgTableName
          VARIABLES_TABLE_NAME: !Ref variablesTableName
          REGION: !Ref region
      FunctionName: telegramWebhook
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: build/functions/telegramWebhook/.
      Description: Telegram bot webhook
      Timeout: 10
      FunctionUrlConfig:
        AuthType: NONE
      Policies:
        # - AWSLambdaBasicExecutionRole
        # - AWSLambda_ReadOnlyAccess
        # - AWSLambdaDynamoDBExecutionRole
        - AmazonDynamoDBReadOnlyAccess
      Tracing: Active
      Layers:
        - !Ref telegramWebhookLayer
  updateDatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref ygoTcgTableName
          VARIABLES_TABLE_NAME: !Ref variablesTableName
          REGION: !Ref region
      FunctionName: updateDatabase
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: build/functions/updateDatabase/.
      Description: YGO TCG card database update
      Timeout: 10
      Policies:
        # - AWSLambdaBasicExecutionRole
        # - AWSLambda_ReadOnlyAccess
        - DatabaseAdministrator
      Events:
        SQSEvent:
          Type: SQS
          Properties: 
            BatchSize: 10
            Enabled: true
            Queue: !GetAtt updateDatabaseSQS.Arn
            ScalingConfig:
              MaximumConcurrency: 10
      Tracing: Active
  updateDatabaseSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: updateDatabaseSQS
  updateDatabaseSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - SQS:SendMessage
              - SQS:ReceiveMessage
            Effect: Allow
            Principal:
              AWS:
                - !Ref userId

            Resource: !GetAtt updateDatabaseSQS.Arn
      Queues:
        - !Ref updateDatabaseSQS
